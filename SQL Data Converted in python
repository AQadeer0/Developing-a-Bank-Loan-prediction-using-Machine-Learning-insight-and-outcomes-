#sql data convert in python
import random
import pandas as pd
from datetime import datetime, timedelta

# Function to generate random loan data
def generate_loan_data(num_records=100):
    loan_data = []
    for i in range(num_records):
        loan_id = f"{i+1:03}"
        loan_amount = random.randint(100000, 1000000)
        interest_rate = round(random.uniform(7.0, 15.0), 2)
        repayment_frequency = random.choice(['Monthly', 'Quarterly'])
        loan_term = random.choice([12, 24, 36, 48])
        borrower_age = random.randint(20, 60)
        borrower_income = random.randint(30000, 150000)
        employment_status = random.choice(['Employed', 'Self-employed', 'Unemployed'])

        on_time_payments = random.randint(0, loan_term)
        missed_payments = loan_term - on_time_payments

        default_status = random.choice(['Yes', 'No'])
        if default_status == 'Yes':
            default_date = datetime.now() - timedelta(days=random.randint(30, 365))
        else:
            default_date = None

        market_rate = round(random.uniform(5.0, 10.0), 2)
        inflation_rate = round(random.uniform(2.0, 5.0), 2)
        loan_issuance_date = datetime.now() - timedelta(days=random.randint(100, 1000))
        repayment_start_date = loan_issuance_date + timedelta(days=random.randint(30, 60))

        collateral_type = random.choice(['Property', 'Car', 'None'])
        collateral_value = random.randint(100000, 1000000) if collateral_type != 'None' else 0

        loan_data.append([loan_id, loan_amount, interest_rate, repayment_frequency, loan_term, borrower_age, borrower_income,
                         employment_status, on_time_payments, missed_payments, default_status, market_rate, inflation_rate,
                         loan_issuance_date.strftime('%d/%m/%Y'), repayment_start_date.strftime('%d/%m/%Y'), loan_amount * 0.5, collateral_type, collateral_value])

    # Create a DataFrame
    columns = ['Loan ID', 'Loan Amount', 'Interest Rate', 'Repayment Frequency', 'Loan Term (Months)', 'Borrower Age', 'Borrower Income',
               'Employment Status', 'Previous Repayment History (On-Time)', 'Previous Repayment History (Missed Payments)', 'Loan Default Status',
               'Market Rate', 'Inflation Rate', 'Loan Issuance Date', 'Repayment Start Date', 'Current Loan Balance', 'Collateral Type', 'Collateral Value']

    df = pd.DataFrame(loan_data, columns=columns)

    return df

# Function to generate SQL insert statements from DataFrame
def generate_sql_inserts(df):
    sql_statements = []
    for index, row in df.iterrows():
        sql = f"INSERT INTO loan_data (Loan_ID, Loan_Amount, Interest_Rate, Repayment_Frequency, Loan_Term, Borrower_Age, Borrower_Income, Employment_Status, On_Time_Payments, Missed_Payments, Default_Status, Market_Rate, Inflation_Rate, Loan_Issuance_Date, Repayment_Start_Date, Current_Loan_Balance, Collateral_Type, Collateral_Value) VALUES ('{row['Loan ID']}', {row['Loan Amount']}, {row['Interest Rate']}, '{row['Repayment Frequency']}', {row['Loan Term (Months)']}, {row['Borrower Age']}, {row['Borrower Income']}, '{row['Employment Status']}', {row['Previous Repayment History (On-Time)']}, {row['Previous Repayment History (Missed Payments)']}, '{row['Loan Default Status']}', {row['Market Rate']}, {row['Inflation Rate']}, '{row['Loan Issuance Date']}', '{row['Repayment Start Date']}', {row['Current Loan Balance']}, '{row['Collateral Type']}', {row['Collateral Value']});"
        sql_statements.append(sql)
    return sql_statements

# Generate loan data and create SQL statements
df = generate_loan_data(100)
sql_inserts = generate_sql_inserts(df)

# Print out the SQL statements or save them to a file
for sql in sql_inserts:
    print(sql)
