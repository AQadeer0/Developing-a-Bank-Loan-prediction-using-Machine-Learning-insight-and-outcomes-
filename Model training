#model traning
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.impute import SimpleImputer
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.model_selection import GridSearchCV

# Your existing functions here (generate_loan_data, preprocess_data, perform_eda, evaluate_models)

# Generate loan data (You can replace this with actual data generation or import)
df = generate_loan_data(100)  # Replace with actual data generation logic
df_cleaned = preprocess_data(df)

# Ensure that Loan Default Status is binary (0 or 1)
df_cleaned['Loan Default Status'] = df_cleaned['Loan Default Status'].astype(int)

# Perform EDA
perform_eda(df_cleaned)

# Splitting data into features and target
X = df_cleaned.drop('Loan Default Status', axis=1)  # Features
y = df_cleaned['Loan Default Status']  # Target

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Evaluate the models
evaluate_models(X_train, X_test, y_train, y_test)

# Example for hyperparameter tuning using GridSearchCV (for Random Forest)
param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [None, 10, 20, 30],
}

# Random Forest with GridSearchCV
grid_search = GridSearchCV(RandomForestClassifier(), param_grid, cv=5)
grid_search.fit(X_train, y_train)

# Best parameters and model performance
print("Best parameters:", grid_search.best_params_)
y_pred_best = grid_search.best_estimator_.predict(X_test)
print("Accuracy with best model:", accuracy_score(y_test, y_pred_best))
